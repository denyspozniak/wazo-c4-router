# Wazo Platform C4 v1.0 - file version : 2019-07-02 18:50:22

#!KAMAILIO

#
# Kamailio (OpenSER) SIP Server v5.3
#
# Copyright 2019 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0-or-later

# Defined Values
# ==============

##!define ISNOT_SBC 1
##!define IS_ROUTER

# #!define WITH_DEBUG 1

## To be activated for SBC and AIO roles
#!define WITH_ANTIFLOOD 1
##

#!define SCANNER_BLACKLIST "sipsak|friendly-scanner|sipvicious|sipcli|sip-scan|sundayddr|iWar|CSipSimple|SIVuS|Gulp|sipv|smap|friendly-request|VaxIPUserAgent|VaxSIPUserAgent|siparmyknife|Test Agent"

#Â #!define WITH_DMQ 1

## To be activated for SIP Router and AIO roles
#!define WITH_AUTH 1
#!define WITH_UAC_REG 1
##

#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7


# Global Parameters
# =================

children=8

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

memdbg=5
memlog=5

tcp_accept_no_cl=yes

# LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
sip_warning=1
#!else
debug=2
log_stderror=no
sip_warning=0
#!endif


# Local config file (if it exists)
# ================================

import_file "kamailio-local.cfg"


# Default Values
# ==============

#!ifndef DBTEXT_DIRECTORY
#!define DBTEXT_DIRECTORY "/etc/kamailio/dbtext"
#!endif

#!ifndef REG_DB_URL
#!define REG_DB_URL "text:///etc/kamailio/dbtext"
#!endif

#!ifndef DOMAIN_DB_URL
#!define DOMAIN_DB_URL "text:///etc/kamailio/dbtext"
#!endif

#!ifndef DBURL_DIALOG
#!define DBURL_DIALOG "redis://redis:6379/7"
# In SBC role the value must be changed like this :
##!define DBURL_DIALOG "redis://redis:6379/6"
#!endif

#!ifndef LISTEN_XHTTP
#!define LISTEN_XHTTP tcp:eth0:9600
#!endif

## To be activated for SBC
#!ifndef DISPATCHER_ALG
#!define DISPATCHER_ALG "0"
#!endif

#!ifndef REG_CONTACT_ADDRESS
#!define REG_CONTACT_ADDRESS "localhost:5060"
#!endif

#!ifndef HTTP_ASYNC_CLIENT_WORKERS
#!define HTTP_ASYNC_CLIENT_WORKERS 8
#!endif

#!ifdef LISTEN_ADVERTISE
listen=LISTEN advertise LISTEN_ADVERTISE
#!else
listen=LISTEN
#!endif
listen=LISTEN_XHTTP
#!ifdef WITH_DMQ
listen=DMQ_LISTEN
#!endif

#!ifdef ALIAS
alias=ALIAS
#!endif


# Modules Section
# ===============

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "sdpops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "http_async_client.so"
loadmodule "rtjson.so"
loadmodule "jansson.so"
loadmodule "nathelper.so"
loadmodule "db_text.so"
loadmodule "db_redis.so"
loadmodule "xhttp.so"
loadmodule "uac.so"
loadmodule "exec.so"

#!ifdef ISNOT_SBC
loadmodule "rtpengine.so"
loadmodule "evrexec.so"
loadmodule "cfgutils.so"
loadmodule "avp.so"
#!endif

#!ifdef IS_SBC
# This module has to loaded in sbc role
loadmodule "dispatcher.so"
#!endif

loadmodule "domain.so"

#!ifdef WITH_DMQ
loadmodule "dmq.so"
#!endif

loadmodule "dialog.so"
loadmodule "htable.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_AUTH
loadmodule "auth.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUGGER
loadmodule "debugger.so"
#!endif


# Setting module-specific parameters
# ==================================

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "transport", 0)
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)

#!ifdef ISNOT_SBC
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)
#!endif
#!ifdef IS_SBC
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 5000)
#!endif

modparam("tm", "reparse_on_dns_failover", 0)
modparam("tm", "cancel_b_method", 0)

#!ifdef IS_SBC
# ----- dispatcher params -----
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "ds_hash_size", 9)
modparam("dispatcher", "ds_ping_interval", 5)
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")
modparam("dispatcher", "ds_probing_mode", 1)

# ----- uac params -----
modparam("uac", "auth_username_avp", "$avp(auser)")
modparam("uac", "auth_password_avp", "$avp(apass)")
modparam("uac", "auth_realm_avp", "$avp(arealm)")
#!endif

#!ifdef WITH_DMQ
# ----- dmq params -----
modparam("dmq", "server_address", DMQ_SERVER_ADDRESS)
modparam("dmq", "notification_address", DMQ_NOTIFICATION_ADDRESS)
modparam("dmq", "multi_notify", 1)
modparam("dmq", "num_workers", 4)
modparam("dmq", "ping_interval", 15)
# ----- htable params -----
modparam("htable", "enable_dmq", 1)
modparam("htable", "dmq_init_sync", 1)
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)
# ----- pike/htable params -----
#!ifdef WITH_DMQ
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;dmqreplicate=1;")
#!else
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif
#!endif

#!ifdef WITH_REDIS_DIALOG
# ----- db_redis params -----
modparam("db_redis", "keys", "dialog=entry:hash_entry,hash_id,callid")
modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id,dialog_key,dialog_value")
#!endif

#!ifdef WITH_REDIS_DIALOG
# ----- dialog params -----
modparam("dialog", "db_url", DBURL_DIALOG)
modparam("dialog", "default_timeout", 10800)
modparam("dialog", "profiles_with_value", "calllimit")
modparam("dialog", "enable_stats", 1)
modparam("dialog", "db_mode", 2)
modparam("dialog", "dlg_flag", 31)
modparam("dialog", "db_update_period", 10)
modparam("dialog", "send_bye", 1)
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUGGER
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 1)

# ----- http_async_client params -----
modparam("http_async_client", "workers", HTTP_ASYNC_CLIENT_WORKERS)
modparam("http_async_client", "connection_timeout", 2000)

# ----- db_text params -----
modparam("db_text", "db_mode", 1)

#!ifdef WITH_AUTH
# ----- auth params -----
modparam("auth", "algorithm", "MD5")
#!ifdef ROUTER_AUTH_SECRET
modparam("auth", "secret", ROUTER_AUTH_SECRET)
#!endif
# ----- auth/htable params -----
#!ifdef WITH_DMQ
modparam("htable", "htable", "auth=>size=16;autoexpire=60;dmqreplicate=1;")
#!else
modparam("htable", "htable", "auth=>size=16;autoexpire=60;")
#!endif
#!endif

#!ifdef ISNOT_SBC
# ----- rtpengine params -----
// modparam("rtpengine", "rtpengine_sock", RTPENGINE_LIST)
modparam("rtpengine", "db_url", REG_DB_URL)
#!endif

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
# modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", 7)
# To be push in variable like PyFreeBilling
modparam("nathelper", "sipping_from", "sip:pinger@wazo.io")
modparam("nathelper", "keepalive_timeout", 120)
modparam("nathelper", "sipping_method", "OPTIONS")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("nathelper", "udpping_from_path", 1)

#!ifdef ISNOT_SBC
#!ifdef WITH_UAC_REG
# ----- uac params -----
modparam("uac", "reg_db_table", "uacreg")
modparam("uac", "reg_db_url", REG_DB_URL)
modparam("uac", "reg_timer_interval", 60)
modparam("uac", "reg_retry_interval", 300)
modparam("uac", "reg_contact_addr", "$(REG_CONTACT_ADDRESS)")
modparam("uac", "reg_contact_addr", "localhost:5060")
modparam("uac", "auth_username_avp", "$avp(auser)")
modparam("uac", "auth_password_avp", "$avp(apass)")
modparam("uac", "auth_realm_avp", "$avp(arealm)")
# ----- evrexec params -----
modparam("evrexec", "exec", "name=evrexec:uacreg;wait=5000000;workers=1;")
#!endif
#!endif

# ----- xhttp params -----
modparam("xhttp", "url_skip", "^/RPC2")

# ----- pv params -----
# enable or disable pike
modparam("pv", "shvset", "router_off=i:0")

# ----- domain params -----
modparam("domain", "db_url", DOMAIN_DB_URL)
modparam("domain", "register_myself", 1)

# ----- db_text params -----
modparam("db_text", "db_mode", 1)


# Included configuration files
# ============================
import_file "routing.cfg"
#!ifdef WITH_CDRS
import_file "cdrs.cfg"
#!endif
# File content must be checked
import_file "xhttp.cfg"


# Start-up and timers
# ===================
#!ifdef ISNOT_SBC
event_route[evrexec:uacreg] {
  while(1) {
    route(JSONRPC_DBTEXT_UACREG);
    sleep("600");
  }
}
#!endif


# Routing Logic
# =============
request_route {
    #!ifdef WITH_DMQ
    if ($rm == "KDMQ" && $rp == DMQ_PORT) {
        dmq_handle_message();
        exit;
    }
    #!endif
    # per request initial checks
    route(REQINIT);
    #!ifdef TESTING
    if ($shv(router_off) == 1) {
        xlog("L_NOTICE","Router is OFF..exiting!\n");
        exit;
    }
    #!endif
    # NAT detection
    route(NATDETECT);
    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            #!ifdef ISNOT_SBC
            route(RTPE);
            #!endif
            route(RELAY);
        }
        exit;
    }
    # handle retransmissions
    if (!is_method("ACK")) {
        if (t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    #!ifdef ISNOT_SBC
    # extract original source ip / port from X-forwarded-For header
    route(HANDLE_X_FORWARDED_FOR);
    #!endif

    #!ifdef IS_SBC
    # add X-Forwarded-For header with the source ip address
    if (!is_present_hf("X-Forwarded-For")) {
        insert_hf("X-Forwarded-For: $si:$sp\r\n");
    }
    #!endif

    # handle requests within SIP dialogs
    route(WITHINDLG);
    # ----- only initial requests (no To tag) -----
    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }
    # account only INVITEs
    if (is_method("INVITE")) {
        setflag(FLT_ACC); # do accounting
    }
    # enable dialog management
    if (is_method("INVITE")) {
      dlg_manage();
    }

    # relay the messages
    #!ifdef ISNOT_SBC
    route(RELAY_API);
    #!endif
    #!ifdef IS_SBC
    route(DISPATCH);
    #!endif
}


# Per SIP request initial checks
route[REQINIT] {
    #!ifdef WITH_ANTIFLOOD
      #!ifdef TESTING
      if ($shv(pike_off) == 0) {
      #!endif
          if (src_ip!=myself) {
              if ($sht(ipban=>$si)!=$null) {
                  # ip is already blocked
                  xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
                  exit;
              }
              if (!pike_check_req()) {
                  xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
                  $sht(ipban=>$si) = 1;
                  exit;
              }
          }
      #!ifdef TESTING
      }
      else if ($shv(pike_off) == 1) {
          xlog("L_NOTICE","PIKE: forced to OFF!\n");
      }
      #!endif
    #!endif
    if ($ua =~ SCANNER_BLACKLIST) {
        # silent drop for scanners - uncomment next line if want to reply
        # sl_send_reply("200", "OK");
        exit;
    }
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }
    if (is_method("OPTIONS") && src_ip != myself) {
        sl_send_reply("200","Keepalive");
        exit;
    }
    if (!sanity_check("17895", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}


# extract original source ip / port from X-forwarded-For header
route[HANDLE_X_FORWARDED_FOR] {
    if (is_present_hf("X-Forwarded-For")) {
        $avp(source_ip) = $(hdr(X-Forwarded-For){s.select,0,:});
        $avp(source_port) = $(hdr(X-Forwarded-For){s.select,1,:});
    } else {
        $avp(source_ip) = $si;
        $avp(source_port) = $sp;
    }
}


# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;
    # handle foreign dialogs
    if (!is_known_dlg()) {
        route(FOREIGN_DIALOG);
    }
    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        #!ifdef ISNOT_SBC
        if (is_method("INVITE|UPDATE") && sdp_content() && nat_uac_test("18")) {
            route(RTPE);
        }
        #!endif
        if (is_method("BYE")) {
            setflag(FLT_ACC); # do accounting ...
            setflag(FLT_ACCFAILED); # ... even if the transaction fails
        } else if (is_method("ACK")) {
            # ACK is forwarded statelessly
            #!ifdef ISNOT_SBC
            route(RTPE);
            #!endif
            route(NATMANAGE);
        } else if (is_method("NOTIFY")) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }
    if (is_method("ACK")) {
        if (t_check_trans()) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

route[FOREIGN_DIALOG] {
    xlog("L_INFO", "FOREIGN_DIALOG - loading dialog from DB for ci: $(ci) ...\n");

    dlg_db_load_callid($ci);
    if (is_known_dlg()) {
        dlg_manage();
        return;
    }

    send_reply('400', "Bad Request");
    exit;
}


# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
    force_rport();
    if (nat_uac_test("19")) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            if (is_first_hop())
                set_contact_alias();
        }
        setflag(FLT_NATS);
    }
#!endif
    return;
}


# NAT management control
route[NATMANAGE] {
#!ifdef WITH_NAT
    if (is_request()) {
        if (has_totag()) {
            if (check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
        }
    }
    if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
        return;

    if (is_request()) {
        if (!has_totag()) {
            if (t_is_branch_route()) {
                add_rr_param(";nat=yes");
            }
        }
    }
    if (is_reply()) {
        if (isbflagset(FLB_NATB)) {
            set_contact_alias();
        }
    }
#!endif
    return;
}


#!ifdef IS_SBC
# Dispatch requests
route[DISPATCH] {
    # We have X-Auth headers
    if (is_present_hf("X-Auth-Username")) {
        $avp(auser) = $hdr(X-Auth-Username);
        $avp(apass) = $hdr(X-Auth-Password);
        $avp(arealm) = $hdr(X-Auth-Realm);
        remove_hf("X-Auth-Username");
        remove_hf("X-Auth-Password");
        remove_hf("X-Auth-Realm");
    }
    # We already have an X-Destination-URI header
    if (is_present_hf("X-Destination-URI")) {
        $du = $hdr(X-Destination-URI);
        remove_hf("X-Destination-URI");
        route(RELAY);
        exit;
    }
	# hash over callid dispatching on gateways group '1', up to two results
	if (!ds_select_dst("1", DISPATCHER_ALG, "2")) {
		send_reply("404", "No destination");
		exit;
	}
    # we've got more than one result, we can store the failover router in a dlg_var
    if ($xavp(_dsctx_=>cnt) >= 2) {
        $dlg_var(du_primary) = $xavp(_dsdst_[0]=>uri);
        $dlg_var(du_secondary) = $xavp(_dsdst_[1]=>uri);
    }
	route(RELAY);
	exit;
}
#!endif

# Wrapper for relaying requests
route[RELAY] {
    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|UPDATE|CANCEL|ACK")) {
        dlg_manage();
    }
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if (!t_is_set("branch_route")) {
            t_on_branch("MANAGE_BRANCH");
        }
    }
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if (!t_is_set("onreply_route")) {
            t_on_reply("MANAGE_REPLY");
        }
    }

    #!ifdef IS_SBC
    if (!t_is_set("failure_route")) {
        t_on_failure("MANAGE_FAILURE");
    }
    #!endif

    #!ifdef ISNOT_SBC
    if (is_method("INVITE")) {
        if (!t_is_set("failure_route")) {
            t_on_failure("MANAGE_FAILURE");
        }
    }
    #!endif

    #!ifdef IS_ROUTER
    # add X-Destination-URI header with the destination URI
    if (!is_present_hf("X-Destination-URI")) {
        insert_hf("X-Destination-URI: $du\r\n");
    }
    # add X-Auth-Username header with the auth username, if needed
    if (attr_exists("auser") && !is_present_hf("X-Auth-Username")) {
        insert_hf("X-Auth-Username: $avp(auser)\r\n");
        insert_hf("X-Auth-Password: $avp(apass)\r\n");
        insert_hf("X-Auth-Realm: $avp(arealm)\r\n");
    }
    #Â Always forward back to the SBC
    $du = "sip:" + $si + ":" + $sp;
    #!endif

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}


# Manages RTP Engine
#!ifdef ISNOT_SBC
route[RTPE] {
    if (!is_method("INVITE|UPDATE|ACK|BYE|CANCEL")) return;

    if (is_method("ACK") && !has_body("application/sdp")) return;

    $var(common_opts) = 'replace-session-connection replace-origin';

    if (nat_uac_test("18")) {
        xlog("L_INFO", "-- RTPENGINE: NAT detected, do not trust SDP addresses\n");
        $var(symmetry) = 'SIP-source-address';
    } else {
        xlog("L_INFO", "-- RTPENGINE: No NAT detected, trust SDP addresses\n");
        $var(symmetry) = 'trust-address';
    }

    $var(wsopts) ='ICE=remove RTP/AVP';
    $var(interfaces) = "direction=external direction=external";

    if (sdp_content()){
        xlog("L_INFO", "-- RTPENGINE: rtpengine_manage [$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)]\n");
        if (is_method("INVITE")) {
            rtpengine_offer("$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)");
        } else {
            rtpengine_manage("$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)");
        }
    }
}
#!endif

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xdbg("new branch [$T_branch_idx] to $ru\n");
    #!ifdef ISNOT_SBC
    if ($avp(rtjson_routes)) {
        rtjson_update_branch();
    }
    route(RTPE);
    #!endif
}


# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
    #!ifdef ISNOT_SBC
    route(RTPE);
    #!endif
}


# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
    if (t_is_canceled()) {
        exit;
    }
    if (t_check_status("401|407")) {
        uac_auth();
        t_relay();
        exit;
    }

    #!ifdef ISNOT_SBC
    if (rtjson_next_route()) {
        route(RELAY);
        exit;
    }
    #!endif

    #!ifdef IS_SBC
    # next destination - only for 500 or local timeout
  	if (t_check_status("500") or (t_branch_timeout() and !t_branch_replied())) {
  		if (ds_next_dst()) {
  			route(RELAY);
  			exit;
  		} else if (defined $dlg_var(du_secondary) && !strempty($dlg_var(du_secondary))) {
        # relay the packet to the secondary router
        $du = $dlg_var(du_secondary);
        $dlg_var(du_secondary) = "";
  			route(RELAY);
  			exit;
      }
	  }
    #!endif
}
