event_route[xhttp:request] {
  if ($hu =~ "^/rpc") {
    jansson_get("method", "$rb", "$var(rpcMethod)");
    jansson_get("id", "$rb", "$var(rpcID)");
    if ($var(rpcMethod) =~ "^wazo\.") {
      route(JSONRPC);
      exit;
    }

    jsonrpc_dispatch();
    exit;
  }
  else if ($hu == "/status") {
    xhttp_reply("200", "OK", "text/plain", "");
    exit;
  }

  xhttp_reply("404", "Not Found", "text/plain", "URL: $hu\r\n");
  exit;
}


route[JSONRPC] {
  if ($var(rpcMethod) == "wazo.dbtext.uacreg") {
      route(JSONRPC_DBTEXT_UACREG);

      jansson_set("string", "jsonrpc", "2.0", "$var(rpc_response)");
      jansson_set("int", "id", $var(rpcID), "$var(rpc_response)");
      jansson_set("int", "result", 1, "$var(rpc_response)");

      xhttp_reply("200", "OK", "application/json", "$var(rpc_response)");
      exit;
  }

  xhttp_reply("400", "Bad Request", "text/plain", "Method not found: $var(rpcMethod)\r\n");
  exit;
}


route[JSONRPC_DBTEXT_UACREG] {
    $http_req(all) = $null;
    $http_req(suspend) = 0;
    $http_req(timeout) = HTTP_API_TIMEOUT;
    $http_req(method) = "GET";
    xlog("L_INFO","API DBTEXT/UACREG REQUEST\n");
    http_async_query(HTTP_API_DBTEXT_UACREG_ENDPOINT, "JSONRPC_DBTEXT_UACREG_RESPONSE");
}


route[JSONRPC_DBTEXT_UACREG_RESPONSE] {
    if ($http_ok && $http_rs == 200) {
        xlog("L_INFO","API DBTEXT/UACREG RESPONSE: $http_rb\n");
        jansson_get("content", "$http_rb", "$var(dbtext_uacreg)");
        $var(dbtext_directory) = DBTEXT_DIRECTORY;
        exec_msg('mkdir -p "$var(dbtext_directory)"');
        exec_msg('echo -n "$var(dbtext_uacreg)" > "$var(dbtext_directory)/uacreg"');
        jsonrpc_exec('{"jsonrpc": "2.0", "method": "uac.reg_reload", "id": "1"}');
    }
}
